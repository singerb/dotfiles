" start things off with pathogen, before we turn on filetype
execute pathogen#infect()

" needed in VS Code/hyper due to xterm.js color rendering
let g:solarized_termcolors=256

set shell=sh " use a default shell impl, since vim doesn't like fish for some reason
set nocompatible " turn off silly vi compatibility

" set rtp+=/usr/local/lib/python2.7/site-packages/powerline/bindings/vim

set noshowmode " with powerline, no need to show the mode

set ai nu sm " standard programming tools: auto-indent, line numbers, show matching braces
set incsearch hlsearch " better search: incremental as you type, and highlight matches
set wildmode=list:longest " sane command/file completion: complete longest common string and list all possible matches; why is this not the default?

" 4 space tabs, expanded to spaces
set sw=4
set sts=4
set expandtab

set laststatus=2 " always have a status line
set splitbelow splitright " splits go below and right by default

" remove the toolbar,menubar,scrollbars from the gui version
" set a nice font for the GUI; terminal vim uses the terminal font, obviously
set guioptions-=T
" set guioptions-=m
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
set guioptions-=b
set guifont=Source\ Code\ Pro\ Medium\ 11

set encoding=utf-8 " so our list chars can be nice
set fo=croql " text wrapping: auto wrap comments, auto insert comment leaders; TODO add a for markdown files for nice paragraph wrapping
set wrap " soft wrap text
set listchars=tab:▸-,trail:-,eol:¬ " show tabs, trailing spaces, and ends of lines; there's a leader shortcut later to toggle list mode since it can be distracting
set textwidth=120
" same shortcut to toggle list mode toggles the column,
" since it's also distracting
" set colorcolumn="+1"

set scrolloff=5 " always keep 5 lines of context when scrolling the cursor
set lazyredraw " scrolling with lots of error markers can be slow; this speeds it up

set hidden " keep changed buffers as hidden ones
set cursorline " highlight the cursor line
set ruler " show line/col of cursor

" syntax highlighting
syntax enable
filetype indent on
filetype plugin on

" enable the built in man page reading; makes :Man <foo> and <leader>K (man of
" word under cursor) available
runtime ftplugin/man.vim

" get our zsh theme files highlighted nicely
autocmd BufNewFile,BufRead *.zsh-theme setlocal filetype=zsh

" get our scons files highlighted nicely
autocmd BufNewFile,BufRead SConstruct,SConscript setlocal filetype=python

" make requires tabs, not spaces, so force our nice tab expansion off although they'll still display as 4 spaces
autocmd FileType make setlocal noexpandtab

" PHP and JS for WordPress uses tabs not spaces
" Vim's PHP comment settings are also messed up
autocmd FileType php,javascript,css setlocal noexpandtab sw=4 sts=0 ts=4
autocmd FileType php setlocal comments+=sb:/*,mb:*,ex:*/,b://

" smart indenting generally gets things right, but I find it annoying in python files due to the comment behavior
autocmd! FileType python setlocal nosmartindent

" set the velocity filetype on .vm files
autocmd BufRead,BufNewFile *.vm setfiletype velocity

" set up comment strings
autocmd FileType python,sh,make setlocal commentstring=#\ %s
autocmd FileType c,cpp,php setlocal commentstring=//\ %s

" sadly, mozilla and my workplace use 2 spaces for C/C++/C#/Java, so override for that
autocmd BufRead,BufNewFile *.c,*.h,*.cpp,*.hpp,*.cxx,*.cs,*.java setlocal sw=2 sts=2

" nice colorscheme
set background=dark
colorscheme solarized

" airline config
" branch extension is super slow, disable it
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#tmuxline#enabled = 0
let g:tmuxline_preset = 'full'
let g:tmuxline_theme = {
    \   'a'    : [ 15, 4 ],
    \   'b'    : [ 15, 12 ],
    \   'c'    : [ 14, 10 ],
    \   'x'    : [ 14, 10 ],
    \   'y'    : [ 15, 12 ],
    \   'z'    : [ 15, 4 ],
    \   'win'  : [ 14, 10 ],
    \   'cwin' : [ 15, 9, 'bold' ],
    \   'bg'   : [ 15, 0 ],
    \ }

" sane leader key for our commands and plugins
let mapleader = ","

" syntastic python options; use flake8 and pylint for MAXIMUM checking; default to passive
" Scons files are horrible with syntastic, and it slows down editing; so only check files that I want
" there are leader mappings to run a check, and to clear signs
" no way that I know of to clear syntax highlighting, so it's off
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': ['php'],
                           \ 'passive_filetypes': [] }
let g:syntastic_php_checkers = ['php']
let g:syntastic_python_checkers = ['flake8', 'pylint']
let g:syntastic_python_flake8_args = "--max-line-length=120"
let g:syntastic_python_pylint_args = "--max-line-length=120 -f parseable -r n -i y"
let g:syntastic_enable_highlighting = 0

" minibufexpl options: open above
let g:miniBufExplSplitBelow=0

" command-t options: reverse the results so the best match is always right
" above the prompt, search more files
let g:CommandTMatchWindowReverse = 1
let g:CommandTMaxFiles = 50000
let g:CommandTFileScanner = 'find'

" ctrl-p options, similar
" TODO if it seems slow, use VCS file listing commands
let g:ctrlp_max_files = 50000
let g:ctrlp_extensions = ['mixed']

" tagbar setup: auto close, auto focus, sort by position
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0

" eclim settings; for now, just a simple setting to make completion work with YCM
" will add back more settings later if needed; might add mappings for search etc if I do a lot of Java
let g:EclimCompletionMethod = 'omnifunc'
" let g:EclimProjectTreeAutoOpen = 1
" let g:EclimProjectTreeExpandPathOnOpen = 1
" let g:EclimProjectTreeSharedInstance = 1
" let g:SuperTabDefaultCompletionType = "<c-x><c-u>"
" let g:VerticalToolWindowSide = 'right'
" let g:EclimValidateSortResults = 'severity'
" let g:EclimProjectTreeActions = [
"     \ {'pattern': '.*', 'name': 'Tab', 'action': 'tabnew'},
"     \ {'pattern': '.*', 'name': 'VSplit', 'action': 'vsplit'},
"     \ {'pattern': '.*', 'name': 'Split', 'action': 'split'},
"     \ {'pattern': '.*', 'name': 'Edit', 'action': 'edit'},
"   \ ]
let g:EclimJavaSearchSingleResult = 'edit'
let g:EclimPhpSearchSingleResult = 'edit'
" let g:EclimJavaHierarchyDefaultAction = 'edit'

" UltiSnips settings - don't conflict with YCM, keep snippets in my personal directory
" trigger expansion with Ctrl-e, others aren't used, but can't be empty or it complains
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsListSnippets="<C-S><C-L>"
let g:UltiSnipsJumpForwardTrigger="<C-S><C-S>"
let g:UltiSnipsJumpBackwardTrigger="<C-S><C-s>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "personal-snippets"]

" YCM settings - no annoying extra_conf prompt, use lang identifiers
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_confirm_extra_conf = 0

" use ag instead of ack for ack.vim (faster); TODO will need to be changed for Windows
let g:ackprg = 'ag --nogroup --nocolor --column'

" old pre-eclim Java settings
"autocmd BufRead,BufNewFile *.java set path+=$PROJECT_HOME/devel/src/share/**
"autocmd BufRead,BufNewFile *.java set path+=$PROJECT_HOME/devel/src/generated/**
"autocmd BufRead,BufNewFile *.java set path+=/usr/local/lib/jdk1.5.0_11/**
"autocmd BufRead,BufNewFile *.java set include=^#\s*import
"autocmd BufRead,BufNewFile *.java set includeexpr=substitute(v:fname,'\\.','/','g')
"autocmd BufRead,BufNewFile *.java set suffixesadd=.java
"map gf <C-W>f
"map gc gdb<C-W>f
"autocmd BufRead,BufNewFile *.java set makeprg=ant\ -find\ build.xml\ \\\|\ \/home\/bsing\/sun-filter.sh
"let java_allow_cpp_keywords=1
"autocmd BufRead,BufNewFile *.java set tags=$PROJECT_HOME/devel/src/.tags,/home/bsing/javatags
"autocmd BufRead,BufNewFile *.java set complete=i,],.,b,w,t,k,.

" still useful Java settings to run ant from :make
autocmd BufRead,BufNewFile *.java set makeprg=ant\ -find\ build.xml
autocmd BufRead,BufNewFile *.java set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#

function MakeFQClassName(name)
    let fname = ""
    let classtags = taglist(a:name)
    for t in classtags
        if t.kind == 'c'
            let fname = t.filename
            break
        endif
    endfor
    unlet classtags
    if fname != ""
        let stripped = substitute(substitute(matchstr(fname, "com.*"), ".java", "", ""), "/", "\.", "g")
        unlet fname
        return stripped
    else
        return ""
    endif
endfunction

function InsertImport(word)
    let fqc = MakeFQClassName(a:word)
    if fqc != ""
        let imp = "import " . fqc . ";"
        normal 0G
        let currline = search("import com", "bW")
        if currline != 0
            call append(currline, imp)
            echo "Import added to end of list"
        else
            let currline = search("package", "W")
            normal o<ESC>
            call append(currline, imp)
            echo "First import added"
        endif
    endif
    return
endfunction

function PerforceCmd(action, path, ask)
    if a:ask == 1
        let choice = confirm("Do you want to " . a:action . " this file?", "&Yes\n&No", 1)
        if choice != 1
            return
        endif
    endif
    let result = system("p4 " . a:action . " " . a:path)
    if result =~ "please login" || result =~ "invalid or unset"
        let pass = inputsecret("Password: ")
        let aresult = system("p4 login", pass)
        let result = system("p4 " . a:action . " " . a:path)
    endif

    if result !~ "file(s) not"
        if a:action == "edit"
            set noro
        elseif a:action == "revert"
            edit!
        endif
        echo "Successfully ran p4 " . a:action . " " . a:path
    else
        echo "Could not perform p4 " . a:action . " " . a:path
    endif
    return
endfunction

function SplitWindowToGrep(word, multi, split)
    let prefix = $PROJECT_HOME . '/devel/src/share/'
    if a:multi == 1
        let file = prefix
    else
        let file = expand('%:p')
    endif
    let lines = split(system('grep -nrHEI "\b' . a:word . '\b" ' . file), "\n")
    let linenums = []
    let filenames = []
    let lines2 = []
    call filter(lines, 'v:val !~ "import"')
    call filter(lines, 'v:val !~ "Binary file"')
    let n = 1
    for l in lines
        let entries = split(l, ":")
        let rest = entries[2:]
        let reststr = join(rest, ":")
        let stripped = substitute(reststr, '^\s\+', "", "")
        if stripped =~ '^\*' 
            continue
        elseif stripped =~ '^//'
            continue
        elseif stripped =~ '^/\*'
            continue
        endif
        call add(linenums, entries[1])
        call add(filenames, entries[0])
        call add(lines2, n . " - " . substitute(substitute(entries[0], prefix, "", ""), "/", " ", "g") . ":" . entries[1] . " - " . stripped)
        let n = n + 1
    endfor
    let choice = inputlist(lines2) - 1
    if choice >= 0
        let fname = get(filenames, choice, "")
        let lnum = get(linenums, choice, 0)
        if fname != ""
            if filereadable(fname) != 0
                if a:split == 1
                    execute("split " . fname)
                endif
                execute("normal " . lnum . "ggzz")
            endif
        endif
    endif
endfunction

"map <silent> <F5> :call SplitWindowToGrep(expand("<cword>"), 0, 0)<CR>
"map <silent> <F6> :call SplitWindowToGrep(expand("<cword>"), 1, 1)<CR>
"map <silent> <F7> :call SplitWindowToGrep(expand("<cword>"), 0, 1)<CR>

"map <silent> <F2> :tabpre<CR>
"map <silent> <F3> :tabne<CR>
"map <silent> <F4> :ProjectProblems<CR>
"map <silent> <F5> :JavaImport<CR>
"map <silent> <F6> :JavaSearchContext<CR>
"map <silent> <F7> :JavaHierarchy<CR>

"nnoremap <silent> <F9> :call PerforceCmd("edit", expand("%:p"), 1)<CR>
"nnoremap <silent> <F10> :call PerforceCmd("add -t ktext", expand("%:p"), 0)<CR>
"nnoremap <silent> <F11> :call PerforceCmd("revert", expand("%:p"), 1)<CR>
"nnoremap <silent> <F12> :echo system("p4 opened")<CR>

" basic perforce integration
command Pfedit call PerforceCmd("edit", expand("%:p"), 1)
command Pfadd call PerforceCmd("add -t ktext", expand("%:p"), 0)
command Pfrevert call PerforceCmd("revert", expand("%:p"), 1)
command Pfopened echo system("p4 opened")

" some leader shortcuts for the perforce tasks
map <leader>4e :Pfedit<CR>
map <leader>4a :Pfadd<CR>
map <leader>4r :Pfrevert<CR>
map <leader>4o :Pfopened<CR>

" leader shortcuts for fast splits
map <leader>v :vsplit<CR>
map <leader>s :split<CR>

" leader shortcut for list mode and column
function s:ToggleColorColumn()
    if &colorcolumn == ""
        windo let &colorcolumn="+1"
    else
        windo let &colorcolumn=""
    endif
endfunction

command ToggleColorColumn call <SID>ToggleColorColumn()

map <leader>l :set list! \| ToggleColorColumn<CR>

" leader shortcut for ack and ack word under cursor
map <leader>a :Ack! 
map <leader>aw :Ack! <C-R><C-W><CR>

" leader shortcut for command-T buffer - not sure why plugin doesn't get this automatically
map <leader>t :CtrlPMixed<CR>
" map <leader>r :CtrlPBuffer<CR>
" map <leader>t :CommandTBuffer<CR>
" map <leader>r :CommandTBuffer<CR>

" leader shortcut to show tags
map <leader>g :TagbarToggle<CR>

" leader shortcut to show the undo tree
map <leader>u :GundoToggle<CR>

" leader shortcut to do java nav
map <leader>ji :JavaImport<CR>
map <leader>js :JavaSearchContext<CR>

" leader shortcut for PHP searching
map <leader>ps :PhpSearchContext<CR>

" leader shortcut to run either hg or git diff via lawrencium or fugitive, if
" available
function s:VCDiff()
    if exists(":Hgvdiff")
        Hgvdiff
    elseif exists(":Gvdiff")
        Gvdiff
    endif
endfunction

command VCDiff call <SID>VCDiff()

map <leader>d :VCDiff<CR>

" leader shortcut run a syntastic check, and clear the signs
function s:ClearSigns()
    let nr = bufnr('%')
    execute("sign unplace * buffer=" . nr)
endfunction

command ClearSigns call <SID>ClearSigns()

map <leader>sc :SyntasticCheck<CR>
map <leader>sd :ClearSigns<CR>

" leader shortcut to force a screen redraw, since the video driver
" on my work machine is horrible
map <leader>rd :redraw!<CR>
